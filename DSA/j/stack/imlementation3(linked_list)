//more enhanced 
#include <stdio.h>
#include <stdlib.h>
// Define the Node structure
struct Node {
    int data;
    struct Node *link;
} *top = NULL;

// Function to push an element onto the stack
void push(int x) {
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Heap overflow\n");
        return;
    }
    newNode->data = x;
    newNode->link = top;
    top = newNode;
    printf("Pushed %d onto the stack\n", x);
}

// Function to pop an element from the stack
void pop() {
    if (top == NULL) {
        printf("Stack underflow\n");
    } else {
        struct Node *temp = top;
        top = top->link;
        printf("Popped element is %d\n", temp->data);
        free(temp);
    }
}

// Function to display the top element of the stack
void peek() {
    if (top == NULL) {
        printf("Stack is empty\n");
    } else {
        printf("The top element is %d\n", top->data);
    }
}

// Function to display all elements of the stack
void display() {
    if (top == NULL) {
        printf("Stack is empty\n");
    } else {
        struct Node *temp = top;
        printf("Stack elements are: ");
        while (temp != NULL) {
            printf("%d ", temp->data);
            temp = temp->link;
        }
        printf("\n");
    }
}

// Function to free all nodes in the stack
void freeStack() {
    struct Node *temp = top;
    while (temp != NULL) {
        struct Node *next = temp->link;
        free(temp);
        temp = next;
    }
    top = NULL;
}

// Main function to provide a menu-driven interface for stack operations
int main() {
    int choice, value;

    do {
        printf("\n1. Push\n2. Pop\n3. Peek\n4. Display\n5. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to push: ");
                scanf("%d", &value);
                push(value);
                break;
            case 2:
                pop();
                break;
            case 3:
                peek();
                break;
            case 4:
                display();
                break;
            case 5:
                printf("Exiting...\n");
                freeStack();  // Free allocated memory before exiting
                break;
            default:
                printf("Invalid choice\n");
        }
    } while (choice != 5);

    return 0;
}
